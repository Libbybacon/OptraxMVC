@using OptraxDAL.Models.Admin
@using OptraxMVC.Models


@model Location

@{
    FormVM formVM = ViewBag.FormVM;
    OptionsVM drops = (OptionsVM)(ViewData["Dropdowns"] ?? new());

    var locations = Model.LocationType == "Room" ? drops.BuildingSelects : new List<SelectListItem>();
}

<div class="px-2">

    @using (Html.BeginForm(formVM.Action, "Locations", FormMethod.Post, new { id = "modelForm", data_func = formVM.JsFunc, data_msgdiv = formVM.MsgDiv }))
    {
        @Html.AntiForgeryToken()

        <input type="hidden" id="LocationType" name="LocationType" value="@Model.LocationType" />
        <div class="d-flex justify-content-center">
            <div class="row col-12 d-flex w-100">
                <div class="row col-12 d-flex w-100">
                    <div class="col-6">
                        <label>Location Name</label>
                        <input type="text" id="Name" name="Name" class="form-control" maxlength="50" required />
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "val-msg" })
                    </div>
                    <div class="col-6">
                        <label>Details</label>
                        <input type="text" id="Details" name="Details" class="form-control" maxlength="50" required />
                        @Html.ValidationMessageFor(m => m.Details, "", new { htmlAttributes = new { @class = "val-msg" } })
                    </div>
                    @*@if (Model.LocationType == "Room")
                    {
                        <div class="col-xl-4 col-6">
                            @Html.LabelFor(m => m.ParentID)
                            @Html.DropDownListFor(m => m.ParentID, locations, "Select Parent Location", new { @class = $"form-control select2 attr" })
                            @Html.ValidationMessageFor(m => m.ParentID, "", new { @class = "val-msg" })
                        </div>
                    } *@
                </div>

                @Html.EditorFor(m => m, new ViewDataDictionary(ViewData))


                @* @if (Model is BuildingLocation buildingModel)
            {
                @Html.EditorFor(m => m, new ViewDataDictionary(ViewData))
            } *@
            </div>
        </div>

        <div class="popup-btns d-flex justify-content-center">
            <button type="submit" class="save-btn form-btn @(formVM.IsNew ? "" : "d-none")">Save New Location</button>
            <button type="submit" class="update-btn form-btn d-none">Save Changes</button>
        </div>
    }
</div>

<script src="/js/forms.js"></script>
