@using OptraxDAL.Models.Grow
@using OptraxDAL.Models.Inventory
@using OptraxDAL.ViewModels
@using OptraxMVC.Models

@model Plant

@{
    FormVM formVM = ViewBag.FormVM;
    OptionsVM drops = (OptionsVM)(ViewData["Options"] ?? new());
}

@using (Html.BeginForm(formVM.Action, "Plants", FormMethod.Post, new { id = "modelForm", data_func = formVM.JsFunc, data_msgdiv = formVM.MsgDiv, data_modelname = "plant" }))
{
    @Html.AntiForgeryToken()

    <input type="hidden" id="ResourceID" name="ResourceID" value="@Model.ResourceID" />

    <div class="d-flex justify-content-center w-100 ps-2">
        <div class="w-100 px-2">

            <div class="row col-12 d-flex w-100">
                <div class="col-xl-4 col-6">
                    @Html.LabelFor(m => m.SpeciesID)
                    @Html.DropDownListFor(m => m.SpeciesID, drops.CropSelects, "Select Strain", new { @class = $"form-control select2 attr" })
                    @Html.ValidationMessageFor(m => m.SpeciesID, "", new { @class = "val-msg" })
                </div>
@*                 <div class="col-xl-4 col-6">
                    @Html.LabelFor(m => m.OriginType)
                    @Html.DropDownListFor(m => m.OriginType, drops.OriginTypeSelects, "Select Origin Type", new { @class = $"form-control select2 attr" })
                    @Html.ValidationMessageFor(m => m.OriginType, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div> *@
                <div class="col-xl-4 col-6">
                    @Html.LabelFor(m => m.Phase)
                    @Html.DropDownListFor(m => m.Phase, drops.PhaseSelects, "Select Phase", new { @class = $"form-control select2 attr" })
                    @Html.ValidationMessageFor(m => m.Phase, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
            </div>

            <div class="row col-12 w-100 d-flex">
@*                 <div class="col-xl-4 col-6 mother-info">
                    <div class="h-50"></div>
                    <div class="d-flex justify-content-center">
                        <label class="mt-2">
                            Is Mother?
                            @Html.EditorFor(m => m.IsMother, new { htmlAttributes = new { @class = $"form-check-input attr" } })
                        </label>
                    </div>
                </div>
                <div class="col-xl-4 col-6 mother-info">
                    @Html.LabelFor(m => m.MotherName)
                    @Html.EditorFor(m => m.MotherName, new { htmlAttributes = new { @class = $"form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(m => m.MotherName, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div> *@
                <div id="parentIdDiv" class="col-xl-4 col-6">
                    @Html.LabelFor(m => m.SpeciesID)
                    <select id="ParentID" name="ParentID" class="form-select"><option>Select strain to load options</option></select>
                    @Html.ValidationMessageFor(m => m.SpeciesID, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
            </div>

            <div class="row col-12 w-100 d-flex">
                <div class="col-xl-4 col-6">
                    @Html.LabelFor(m => m.PurchaseDate)
                    @Html.EditorFor(m => m.PurchaseDate, new { htmlAttributes = new { @class = $"form-control", @type = "Date" } })
                    @Html.ValidationMessageFor(m => m.PurchaseDate, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
                <div id="buyPrice" class="col-xl-4 col-6">
                    @Html.LabelFor(m => m.PurchasePrice)
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        @Html.EditorFor(m => m.PurchasePrice, new { htmlAttributes = new { @class = $"form-control" } })
                    </div>
                    @Html.ValidationMessageFor(m => m.PurchasePrice, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
                <div class="col-xl-4 col-6">
                    @Html.LabelFor(m => m.Quantity)
                    @Html.EditorFor(m => m.Quantity, new { htmlAttributes = new { @class = $"form-control", @step = "1" } })
                    @Html.ValidationMessageFor(m => m.Quantity, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
            </div>

            <div class="form-top col-12 pt-3"><div class="form-top-head">Plant Transfer Information</div></div>
            <div id="PlantEvents" class="row col-12 d-flex w-100">
                @Html.EditorFor(m => m.PlantEvents, new ViewDataDictionary(ViewData))
            </div>

            <div class="form-top pt-3 col-12"><div class="form-top-head">Crop Information</div></div>
            @Html.EditorFor(m => m.Crop, new ViewDataDictionary(ViewData))
        </div>
    </div>

    <div class="popup-btns d-flex justify-content-center">
        <button type="submit" class="btn-grn form-btn @(formVM.IsNew ? "" : "d-none")">Save Plants</button>
        <button type="submit" class="update-btn form-btn d-none">Save Changes</button>
    </div>
}

<script src="/js/forms.js"></script>