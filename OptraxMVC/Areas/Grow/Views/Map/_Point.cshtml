@using OptraxDAL.Models.Map
@using OptraxMVC.Models

@model MapPoint

@{
    FormVM formVM = ViewBag.FormVM;
    DropdownsVM drops = (DropdownsVM)(ViewData["Dropdowns"] ?? new());
}

@using (Html.BeginForm(formVM.Action, "Map", FormMethod.Post, new { id = "modelForm", data_func = formVM.JsFunc, data_msgdiv = formVM.MsgDiv, data_modelname = "poly" }))
{
    @Html.AntiForgeryToken()

    <input id="changes" type="hidden" name="Changes" />

    @Html.HiddenFor(m => m.ID)
    @Html.HiddenFor(m => m.IconID)
    @Html.HiddenFor(m => m.Latitude)
    @Html.HiddenFor(m => m.Longitude)

    <div id="edit-content" class="px-2">
        <div class="w-100">
            @Html.LabelFor(m => m.Name)
            @Html.EditorFor(m => m.Name, "Name", new { htmlAttributes = new { @class = "attr form-control" } })
            @Html.ValidationMessageFor(m => m.Name, "", new { @class = "val-msg" })
        </div>

        <label>Select Icon</label>
        <div class="w-100 d-flex">
            <div class="icon-coll-list">
                @* <label class="icon-coll-label">Collections</label> *@
                @for (int i = 0; i < (drops.IconsList.Count + 5); i++)
                {
                    var coll = drops.IconsList[0];

                    <div class="icon-coll-div px-3 @(i == 0 ? "selected" : "")">
                        <div class="icon-coll-inner">@coll.Name</div>
                    </div>
                }
            </div>
            <div class="icon-coll d-flex ps-3">
                @for (int i = 0; i < drops.IconsList.Count; i++)
                {
                    var coll = drops.IconsList[0];

                    <div class="icons d-flex @(i == 0 ? "" : "d-none")">
                        @foreach (var icon in coll.Icons)
                        {
                            <div class="icon-div">
                                <img src="@icon.ImagePath" class="map-icon @(icon.ID == Model.IconID ? "selected" : "")" data-id="@icon.ID" />
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="w-100">
            <label>Details</label>
            <br />
            @Html.TextAreaFor(m => m.Notes, new { @class = "attr form-control w-100", @rows = "3" })
            @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "val-msg" })
        </div>
    </div>
    <div class="popup-btns d-flex w-100 justify-content-center">
        <button type="submit" class="save-btn form-btn @(formVM.IsNew ? "" : "d-none")">Save New Point</button>
        <button type="submit" class="update-btn form-btn d-none">Save Changes</button>
    </div>
}

<script src="/js/forms.js"></script>