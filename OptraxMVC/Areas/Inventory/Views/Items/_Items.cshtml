@using OptraxDAL.Models.Inventory
@using OptraxDAL.ViewModels
@model List<InventoryCategory>

@{
    List<TagVM> allTags = [];
    List<InventoryItem> items = ViewBag.Items;
    List<InventoryCategory> topCats = Model.Where(c => c.ParentID == null).OrderBy(c => c.Name).ToList();
    string tagHex = "var(--gray-md)";
}


<div class="pt-3">
    <div class="cat-list m-0 d-flex p-3">
        @foreach (var cat in topCats)
        {
            List<TagVM> tags = cat.GetChildTags();
            cat.ChildTags = tags;
            allTags.AddRange(tags);
            string bg = $"background:{cat.HexColor ?? tagHex}";

            <div class="flex-fill">
                <div class="cat-top text-center w-100 px-2" style="@bg">@cat.Name</div>
                <div class="d-flex flex-wrap w-100">
                    @foreach (var tag in tags)
                    {
                        <div class="d-flex">
                            <button type="button" class="tag-btn f-sm m-2" style="background:@(tag.Color ?? tagHex)"></button>
                            @tag.Name
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="cat-table-div row h-100 w-100 m-0 p-3">
        <table id="cat-table" class="cat-table table table-bordered w-100">
            <thead>
                <tr>
                    <th class="show-child"></th>
                    <th class="cat-col"></th>
                    <th class="child-col"></th>
                    <th>Name</th>
                    @* <th>Description</th> *@
                    <th>Manufacturer</th>
                    <th>SKU</th>
                    <th>Default UOM</th>
                    <th>Stock Type</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cat in topCats)
                {
                    string catBG = $"background-color:{cat.HexColor}";


                    foreach (var child in cat.Children)
                    {
                        List<int> childIDs = child.GetChildIDs();
                        childIDs.Add(child.ID);

                        List<InventoryItem> catItems = items.Where(i => childIDs.Contains(i.CategoryID)).ToList();
                        string childBG = $"background-color:{child.HexColor}";
                        foreach (var item in catItems)
                        {
                            string trID = $"item-{cat.ID}-{item.ID}";

                            <tr id="@trID" class="item-row f-xs">

                                <td></td>
                                <td>@cat.Name</td>
                                <td>@child.Name</td>
                                <td class="Name vtd">
                                    <span class="attr-txt">@item.Name</span>
                                </td>
                                @*                                     <td class="Description vtd">
                                        <span class="attr-txt">@item.Description</span>
                                    </td> *@
                                <td class="Manufacturer vtd">
                                    <span class="attr-txt">@item.Manufacturer</span>
                                </td>
                                <td class="SKU vtd">
                                    <span class="attr-txt">@item.SKU</span>
                                </td>
                                <td class="DefaultUOM vtd">
                                    <span class="attr-txt">@item.DefaultUOM</span>
                                </td>
                                <td class="StockType vtd">
                                    <span class="attr-txt">@item.StockType</span>
                                </td>

                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<script src="/js/inventory.js"></script>



