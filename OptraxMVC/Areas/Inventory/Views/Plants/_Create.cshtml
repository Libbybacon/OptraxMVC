@using OptraxDAL.Models.Grow
@using OptraxDAL.Models.Inventory
@using OptraxDAL.ViewModels
@using OptraxMVC.Models

@model Plant

@{
    FormVM formVM = ViewBag.FormVM;

    var strains = (IEnumerable<Strain>)(ViewData["StrainsList"] ?? new());
    var phases = (IEnumerable<SelectListItem>)(ViewData["Phases"] ?? new());
    var startTypes = (IEnumerable<SelectListItem>)(ViewData["StartTypes"] ?? new());

    Model.Crop = new Crop() { };
}

@using (Html.BeginForm(formVM.Action, "Plants", FormMethod.Post, new { id = "modelForm", data_func = formVM.JsFunc, data_msgdiv = formVM.MsgDiv, data_modelname = "plant" }))
{
    @Html.AntiForgeryToken()

    <input id="changes" type="hidden" name="Changes" />
    <input type="hidden" id="InventoryItemID" name="InventoryItemID" value="@Model.InventoryItemID" />

    <div class="d-flex justify-content-center">
        <div class="row col-12 d-flex w-100">
            <div class="col-xl-4 col-6">
                @Html.LabelFor(m => m.StrainID)
                <select id="StrainID" name="StrainID" class="form-control select2 attr" data-ival="@Model.StrainID" required>
                    <option value="">Select Strain</option>
                    @foreach (Strain strain in strains)
                    {
                        <option value="@strain.ID" class="strain-opt" data-stype="@strain.StrainType">@strain.Name</option>
                    }
                </select>
                @Html.ValidationMessageFor(m => m.StrainID, "", new { @class = "val-msg" })
            </div>
            <div class="col-xl-4 col-6">
                <div class="h-50"></div>
                <div class="d-flex justify-content-center">
                    <label class="mt-3">
                        Is Mother?
                        @Html.EditorFor(m => m.IsMother, "IsMother", new { htmlAttributes = new { @class = $"form-check-input attr", data_ival = Model.IsMother } })
                        @Html.ValidationMessageFor(m => m.IsMother, "", new { @class = "val-msg" })
                    </label>
                </div>
            </div>
            <div class="col-xl-4 col-6">
                @Html.LabelFor(m => m.MotherName)
                @Html.EditorFor(m => m.MotherName, "MotherName", new { htmlAttributes = new { @class = $"form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(m => m.MotherName, "", new { htmlAttributes = new { @class = "val-msg" } })
            </div>
            <div class="col-xl-4 col-6">
                @Html.LabelFor(m => m.StartType)
                @Html.DropDownListFor(m => m.StartType, startTypes, "Select Start Type", new { @class = $"form-control select2 attr", data_ival = Model.StartType })
                @Html.ValidationMessageFor(m => m.StartType, "", new { htmlAttributes = new { @class = "val-msg" } })
            </div>
            <div class="col-xl-4 col-6">
                @Html.LabelFor(m => m.StartPhase)
                @Html.DropDownListFor(m => m.StartPhase, phases, "Select Phase", new { @class = $"form-control select2 attr", data_ival = Model.StartPhase })
                @Html.ValidationMessageFor(m => m.StartPhase, "", new { htmlAttributes = new { @class = "val-msg" } })
            </div>
            <div class="col-xl-4 col-6">
                @Html.LabelFor(m => m.PurchaseDate)
                @Html.EditorFor(m => m.PurchaseDate, "PurchaseDate", new { htmlAttributes = new { @class = $"form-control" } })
                @Html.ValidationMessageFor(m => m.PurchaseDate, "", new { htmlAttributes = new { @class = "val-msg" } })
            </div>
            <div class="col-xl-4 col-6">
                @Html.LabelFor(m => m.Quantity)
                @Html.EditorFor(m => m.Quantity, "Quantity", new { htmlAttributes = new { @class = $"form-control", @step = "1" } })
                @Html.ValidationMessageFor(m => m.Quantity, "", new { htmlAttributes = new { @class = "val-msg" } })
            </div>
            <div id="Crop" class="row col-12 w-100 d-flex">
                <div class="form-top col-12">
                    <div class="form-top-head">New Crop</div>
                </div>
                <input type="hidden" id="Crop_CurrentPhase" name="Crop.CurrentPhase" />
                <div class="col-6">
                    @Html.LabelFor(m => m.Crop.Name)
                    @Html.EditorFor(m => m.Crop.Name, "", new { htmlAttributes = new { @class = $"form-control" } })
                    @Html.ValidationMessageFor(m => m.Crop.Name, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
                <div class="col-6">
                    @Html.LabelFor(m => m.Crop.BatchID)
                    @Html.EditorFor(m => m.Crop.BatchID, "", new { htmlAttributes = new { @class = $"form-control" } })
                    @Html.ValidationMessageFor(m => m.Crop.BatchID, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
                <div class="col-6">
                    @Html.LabelFor(m => m.Crop.ExpectedVegDays)
                    @Html.EditorFor(m => m.Crop.ExpectedVegDays, "", new { htmlAttributes = new { @class = $"form-control", @step = "1" } })
                    @Html.ValidationMessageFor(m => m.Crop.ExpectedVegDays, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
                <div class="col-6">
                    @Html.LabelFor(m => m.Crop.ExpectedFlowerDays)
                    @Html.EditorFor(m => m.Crop.ExpectedFlowerDays, "", new { htmlAttributes = new { @class = $"form-control", @step = "1" } })
                    @Html.ValidationMessageFor(m => m.Crop.ExpectedFlowerDays, "", new { htmlAttributes = new { @class = "val-msg" } })
                </div>
            </div>
        </div>
    </div>
    <div class="popup-btns d-flex justify-content-center">
        <button type="submit" class="save-btn form-btn @(formVM.IsNew ? "" : "d-none")">Save Plants</button>
        <button type="submit" class="update-btn form-btn d-none">Save Changes</button>
    </div>
}

<script src="/js/forms.js"></script>