@using OptraxDAL.Models.Inventory
@model InventoryCategory

@{
    var depth = ViewData.ContainsKey("Depth") ? (int)ViewData["Depth"] + 1 : 0;
}

<li id="cat-@Model.ID" class="tree-li node depth-@depth">
    <div class="tree-item justify-content-between">
        @if (Model.Children.Count > 0)
        {
            <button class="toggle-btn collapse-btn btn-gray">[-]</button>
        }
        <span class="node-name">@Model.Name</span>
        <div class="d-flex">
            <button class="add-cat-btn otx-btn node-btn" data-parent-id="@Model.ID">Add</button>
            <button class="edit-node otx-btn node-btn"> Edit</button>
            <button class="delete-node otx-btn btn-red node-btn">Delete</button>
        </div>
        <div class="edit-form" style="display: none;">
            <input type="text" class="edit-input" value="@Model.Name" />
            <button class="save-edit otx-btn node-btn">Save</button>
            <button class="cancel-edit otx-btn node-btn"> Cancel</button>
        </div>
    </div>

    <ul class="nested" style="margin-left: @(depth * 30)px;">
        @foreach (var child in Model.Children)
        {
            var childViewData = new ViewDataDictionary(ViewData) { ["Depth"] = depth };

            @await Html.PartialAsync("_TreeNode", child, childViewData)
        }
    </ul>
</li>

@* @model dynamic

<ul class="tree">
    @foreach (var item in Model)
    {
        <li data-id="@item.ID">
            <span class="toggle-btn">[+]</span>
            <span class="item-name">@item.Name</span>

            <button class="edit-btn" data-id="@item.ID">Edit</button>
            <button class="delete-btn" data-id="@item.ID">Delete</button>

            @if (item.Children != null && item.Children.Any())
            {
                <partial name="_TreeView" model="item.Children" />
            }
        </li>
    }
</ul> *@