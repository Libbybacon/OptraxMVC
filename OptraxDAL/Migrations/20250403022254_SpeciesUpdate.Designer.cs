// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using OptraxDAL;

#nullable disable

namespace OptraxDAL.Migrations
{
    [DbContext(typeof(OptraxContext))]
    [Migration("20250403022254_SpeciesUpdate")]
    partial class SpeciesUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IconIconCollection", b =>
                {
                    b.Property<int>("CollectionsID")
                        .HasColumnType("int");

                    b.Property<int>("IconsID")
                        .HasColumnType("int");

                    b.HasKey("CollectionsID", "IconsID");

                    b.HasIndex("IconsID");

                    b.ToTable("IconIconCollection", "Admin");
                });

            modelBuilder.Entity("LocationStockItem", b =>
                {
                    b.Property<int>("LocationsID")
                        .HasColumnType("int");

                    b.Property<int>("StockItemsID")
                        .HasColumnType("int");

                    b.HasKey("LocationsID", "StockItemsID");

                    b.HasIndex("StockItemsID");

                    b.ToTable("LocationStockItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BuildingID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("BusinessID");

                    b.HasIndex("UserID");

                    b.ToTable("Address", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Businesses", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.ContainerType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Capacity")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UoMName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("UoMName");

                    b.ToTable("ContainerTypes", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Icon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Icons", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.IconCollection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("IconCollections", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Input", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("InputName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("InputName")
                        .IsUnique();

                    b.ToTable("Inputs", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("IconID")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("MapObjectID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("IconID");

                    b.HasIndex("MapObjectID")
                        .IsUnique()
                        .HasFilter("[MapObjectID] IS NOT NULL");

                    b.HasIndex("ParentID");

                    b.HasIndex("UserID");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator<string>("LocationType").HasValue("Location");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.UoM", b =>
                {
                    b.Property<string>("UnitName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("PerQuantity")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("UnitAbbr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UnitName");

                    b.ToTable("UoMs", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CultivarID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpeciesID")
                        .HasColumnType("int");

                    b.Property<int?>("StrainID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VarietyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CultivarID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SpeciesID");

                    b.HasIndex("StrainID");

                    b.HasIndex("UserID");

                    b.HasIndex("VarietyID");

                    b.ToTable("Crops", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.CropBatch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OriginType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PropagationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesOrderID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Batches", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Cultivar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BreedingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CultivarID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Generation")
                        .HasColumnType("int");

                    b.Property<string>("Genotype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hybrid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Patented")
                        .HasColumnType("bit");

                    b.Property<string>("Phenotype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CultivarID");

                    b.HasIndex("UserID");

                    b.ToTable("Cultivars", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ContainerTypeID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventSubType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("LightID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ContainerTypeID");

                    b.HasIndex("LightID");

                    b.HasIndex("PlantID");

                    b.HasIndex("UserID");

                    b.ToTable("PlantEvents", "Grow");

                    b.HasDiscriminator<string>("EventType").HasValue("PlantEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Planting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<string>("CurrentStage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DatePlanted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlantingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("WasteQuantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WasteQuantityUoM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BatchID");

                    b.HasIndex("CropID");

                    b.HasIndex("LocationID");

                    b.HasIndex("UserID");

                    b.ToTable("Plantings", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingPattern", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Direction")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Length")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PlantSpacing")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Radius")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("SpaceLeft")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("SpaceRight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("PlantingPatterns", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MapObjectID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("PatternID")
                        .HasColumnType("int");

                    b.Property<int>("PlantingID")
                        .HasColumnType("int");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("MapObjectID")
                        .IsUnique()
                        .HasFilter("[MapObjectID] IS NOT NULL");

                    b.HasIndex("ParentID");

                    b.HasIndex("PatternID");

                    b.HasIndex("PlantingID");

                    b.HasIndex("UserID");

                    b.ToTable("PlantingSections", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Species", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Attracts")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(47);

                    b.Property<string>("AvoidPlants")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(46);

                    b.Property<bool>("Blooms")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<string>("CommonDiseases")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(44);

                    b.Property<string>("CommonName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<string>("CommonPests")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(43);

                    b.Property<string>("CompanionPlants")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(45);

                    b.Property<string>("CropRotationDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(42);

                    b.Property<int?>("CultivarID")
                        .HasColumnType("int");

                    b.Property<string>("CustomName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("Cycle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(22);

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DaysToMaturity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(23);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(0);

                    b.Property<bool>("Fruits")
                        .HasColumnType("bit")
                        .HasColumnOrder(12);

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("GerminationDays")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(36);

                    b.Property<string>("GerminationDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(37);

                    b.Property<bool?>("HardenOff")
                        .HasColumnType("bit")
                        .HasColumnOrder(38);

                    b.Property<string>("HardenOffDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(39);

                    b.Property<string>("HardinessZone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(20);

                    b.Property<string>("HarvestDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(41);

                    b.Property<string>("HarvestPeriod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(24);

                    b.Property<string>("HarvestSignifiers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(40);

                    b.Property<string>("HeatZone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(19);

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(14);

                    b.Property<string>("IdealAirTemp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(30);

                    b.Property<string>("IdealHumidity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(32);

                    b.Property<string>("IdealLightHours")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(33);

                    b.Property<string>("IdealSoilTemp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(31);

                    b.Property<string>("IdealpH")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(34);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlantSpacing")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(9);

                    b.Property<string>("PlantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7);

                    b.Property<string>("PlantingDepth")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(8);

                    b.Property<string>("PlantingMethods")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(21);

                    b.Property<string>("PropagationMethods")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(35);

                    b.Property<string>("PropagationTypes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(25);

                    b.Property<string>("Repels")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(48);

                    b.Property<string>("RowSpacing")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(10);

                    b.Property<string>("Seasons")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(17);

                    b.Property<bool>("Seeds")
                        .HasColumnType("bit")
                        .HasColumnOrder(13);

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(16);

                    b.Property<string>("SoilDrainage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(29);

                    b.Property<string>("SoilType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(18);

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("Spread")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(15);

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WaterNeedsFrequency")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(28);

                    b.Property<decimal?>("WaterNeedsQty")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnOrder(26);

                    b.Property<string>("WaterQtyUOM")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(27);

                    b.HasKey("ID");

                    b.HasIndex("CultivarID");

                    b.HasIndex("SpeciesName")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.HasIndex("WaterQtyUOM");

                    b.ToTable("Species", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Strain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Generation")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OriginID")
                        .HasColumnType("int");

                    b.Property<string>("OriginType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StrainType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Strains", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.StrainRelationship", b =>
                {
                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("ChildID")
                        .HasColumnType("int");

                    b.HasKey("ParentID", "ChildID");

                    b.HasIndex("ChildID");

                    b.ToTable("StrainRelationships");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Variety", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CultivarID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpeciesID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CultivarID");

                    b.HasIndex("UserID");

                    b.ToTable("Varieties", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HexColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("TextColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("Categories", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ApprovalID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DestinationID")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedsApproval")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("UnitUoM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("DestinationID");

                    b.HasIndex("OriginID");

                    b.HasIndex("StockItemID");

                    b.HasIndex("UserID");

                    b.ToTable("Transfers", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Resource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DefaultUoM")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedsTransferApproval")
                        .HasColumnType("bit");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SellerID")
                        .HasColumnType("int");

                    b.Property<string>("StockType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StockUoM")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("[SKU] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Resources", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.SalesOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("SalesOrders", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedsTransferApproval")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("PurchaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ResourceID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ResourceID");

                    b.HasIndex("UserID");

                    b.ToTable("StockItems", "Inventory");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.TransferApproval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("ApprovalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("TransferID")
                        .IsUnique();

                    b.ToTable("TransferApprovals", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.Map", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CollectionID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Maps", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MapID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("UserID");

                    b.ToTable("MapObjects", "Map");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitUoMName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UnitUoMName");

                    b.HasIndex("UserID");

                    b.ToTable("Products", "Products");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("UnitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("ProductBatches", "Products");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<int?>("PlantingID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasFilter("[Barcode] IS NOT NULL");

                    b.HasIndex("BatchID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PlantingID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SalesOrderID");

                    b.ToTable("ProductItems", "Products");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.PurchaseOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FulfillmentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ShipDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("VerifiedReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("PurchaseOrder", "Products");
                });

            modelBuilder.Entity("PurchaseOrderStockItem", b =>
                {
                    b.Property<int>("ItemsID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrdersID")
                        .HasColumnType("int");

                    b.HasKey("ItemsID", "PurchaseOrdersID");

                    b.HasIndex("PurchaseOrdersID");

                    b.ToTable("PurchaseOrderStockItem");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AreaLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<decimal?>("Length")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Radius")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("AreaLocation");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Building", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<int?>("AddressID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasIndex("AddressID")
                        .IsUnique()
                        .HasFilter("[AddressID] IS NOT NULL");

                    b.HasIndex("BusinessID");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Building");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.OffsiteLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<int?>("AddressID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasIndex("AddressID")
                        .HasDatabaseName("IX_Locations_AddressID1");

                    b.HasIndex("BusinessID");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Offsite");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Room", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Site", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<int?>("AddressID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasIndex("AddressID")
                        .HasDatabaseName("IX_Locations_AddressID2");

                    b.HasIndex("BusinessID");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Site");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Vehicle", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Vehicle");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.GrowthEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<string>("NewPhase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PlantEvents", "Grow");

                    b.HasDiscriminator().HasValue("Growth");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PruneEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<string>("PruneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WasteQuantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WasteQuantityUOM")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PlantEvents", "Grow");

                    b.HasDiscriminator().HasValue("Prune");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransferEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<int>("TransferID")
                        .HasColumnType("int");

                    b.HasIndex("TransferID")
                        .IsUnique()
                        .HasFilter("[TransferID] IS NOT NULL");

                    b.ToTable("PlantEvents", "Grow");

                    b.HasDiscriminator().HasValue("Transfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransplantEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<int>("NewContainerID")
                        .HasColumnType("int");

                    b.HasIndex("NewContainerID");

                    b.ToTable("PlantEvents", "Grow");

                    b.HasDiscriminator().HasValue("Transplant");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TreatmentEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityApplied")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("QuantityUoM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasIndex("ProductID");

                    b.ToTable("PlantEvents", "Grow");

                    b.HasDiscriminator().HasValue("Treatment");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Consumable", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitCount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("UoMName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("UoMName");

                    b.ToTable("Consumables", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Durable", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<DateTimeOffset?>("LastMaintenanceCheck")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaintenanceInterval")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceInvervalUoM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Durables", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Light", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<DateTimeOffset?>("FirstInstallDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastMaintenanceCheck")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("Lights", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Plant", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<int?>("CropID")
                        .HasColumnType("int");

                    b.Property<int?>("CultivarID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PropagationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeciesID")
                        .HasColumnType("int");

                    b.Property<int?>("StrainID")
                        .HasColumnType("int");

                    b.Property<string>("TrackingID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VarietyID")
                        .HasColumnType("int");

                    b.HasIndex("CropID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StrainID");

                    b.ToTable("Plants", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapCircle", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<Polygon>("Area")
                        .HasColumnType("geometry");

                    b.Property<byte[]>("ColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<string>("DashArray")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("FillColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Radius")
                        .HasPrecision(12, 8)
                        .HasColumnType("float(12)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Circles", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapLine", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<byte[]>("ColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<string>("DashArray")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("FillColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<LineString>("LineGeometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Lines", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPoint", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<decimal>("Elevation")
                        .HasPrecision(12, 8)
                        .HasColumnType("decimal(12,8)");

                    b.Property<int>("IconCollectionID")
                        .HasColumnType("int");

                    b.Property<int>("IconID")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(12, 8)
                        .HasColumnType("decimal(12,8)");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(12, 8)
                        .HasColumnType("decimal(12,8)");

                    b.HasIndex("IconID");

                    b.ToTable("Points", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPolygon", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<byte[]>("ColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<string>("DashArray")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("FillColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Polygon>("PolyGeometry")
                        .HasColumnType("geometry");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Polygons", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Field", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.AreaLocation");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Field");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Greenhouse", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.AreaLocation");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Greenhouse");
                });

            modelBuilder.Entity("IconIconCollection", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.IconCollection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.Icon", null)
                        .WithMany()
                        .HasForeignKey("IconsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationStockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithMany()
                        .HasForeignKey("StockItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany("Addresses")
                        .HasForeignKey("BusinessID");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.ContainerType", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.UoM", "CapacityUoM")
                        .WithMany()
                        .HasForeignKey("UoMName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapacityUoM");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.IconCollection", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.IconCollection", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Location", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconID");

                    b.HasOne("OptraxDAL.Models.Maps.MapObject", "MapObject")
                        .WithOne("Location")
                        .HasForeignKey("OptraxDAL.Models.Admin.Location", "MapObjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OptraxDAL.Models.Admin.Location", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserID");

                    b.Navigation("Icon");

                    b.Navigation("MapObject");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Cultivar", "Cultivar")
                        .WithMany("Crops")
                        .HasForeignKey("CultivarID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.Species", "Species")
                        .WithMany("Crops")
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Grow.Strain", null)
                        .WithMany("Crops")
                        .HasForeignKey("StrainID");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.HasOne("OptraxDAL.Models.Grow.Variety", "Variety")
                        .WithMany("Crops")
                        .HasForeignKey("VarietyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cultivar");

                    b.Navigation("Species");

                    b.Navigation("User");

                    b.Navigation("Variety");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.CropBatch", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Crop", "Crop")
                        .WithMany("Batches")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Crop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Cultivar", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Cultivar", null)
                        .WithMany("ParentCultivars")
                        .HasForeignKey("CultivarID");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.ContainerType", null)
                        .WithMany("Transplants")
                        .HasForeignKey("ContainerTypeID");

                    b.HasOne("OptraxDAL.Models.Inventory.Light", null)
                        .WithMany("PlantLightEvents")
                        .HasForeignKey("LightID");

                    b.HasOne("OptraxDAL.Models.Inventory.Plant", "Plant")
                        .WithMany("PlantEvents")
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany("PlantEvents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Planting", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.CropBatch", "Batch")
                        .WithMany("Plantings")
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.Crop", "Crop")
                        .WithMany("Plantings")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AreaLocation", "Location")
                        .WithMany("Plantings")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Batch");

                    b.Navigation("Crop");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingPattern", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingSection", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", "MapObject")
                        .WithOne("Section")
                        .HasForeignKey("OptraxDAL.Models.Grow.PlantingSection", "MapObjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OptraxDAL.Models.Grow.PlantingSection", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.PlantingPattern", "Pattern")
                        .WithMany("Sections")
                        .HasForeignKey("PatternID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Grow.Planting", "Planting")
                        .WithMany("Sections")
                        .HasForeignKey("PlantingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("MapObject");

                    b.Navigation("Parent");

                    b.Navigation("Pattern");

                    b.Navigation("Planting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Species", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Cultivar", null)
                        .WithMany("ParentSpecies")
                        .HasForeignKey("CultivarID");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.HasOne("OptraxDAL.Models.Admin.UoM", "WaterUOM")
                        .WithMany()
                        .HasForeignKey("WaterQtyUOM");

                    b.Navigation("User");

                    b.Navigation("WaterUOM");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Strain", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.StrainRelationship", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Strain", "ChildStrain")
                        .WithMany("Parents")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Grow.Strain", "ParentStrain")
                        .WithMany("Children")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildStrain");

                    b.Navigation("ParentStrain");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Variety", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Cultivar", null)
                        .WithMany("ParentVarieties")
                        .HasForeignKey("CultivarID");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Category", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Location", "Destination")
                        .WithMany("TransfersIn")
                        .HasForeignKey("DestinationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.Location", "Origin")
                        .WithMany("TransfersOut")
                        .HasForeignKey("OriginID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", "StockItem")
                        .WithMany("Transfers")
                        .HasForeignKey("StockItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany("InventoryTransfers")
                        .HasForeignKey("UserID");

                    b.Navigation("Destination");

                    b.Navigation("Origin");

                    b.Navigation("StockItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Resource", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Category", "Category")
                        .WithMany("Resources")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.SalesOrder", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Resource", "Resource")
                        .WithMany("StockItems")
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.TransferApproval", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "Manager")
                        .WithMany("TransferApprovals")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.InventoryTransfer", "Transfer")
                        .WithOne("Approval")
                        .HasForeignKey("OptraxDAL.Models.Inventory.TransferApproval", "TransferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.Map", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany("Maps")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapObject", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.Map", "Map")
                        .WithMany("MapObjects")
                        .HasForeignKey("MapID");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.UoM", "UnitUoM")
                        .WithMany()
                        .HasForeignKey("UnitUoMName");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("UnitUoM");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.HasOne("OptraxDAL.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Products.ProductBatch", "Batch")
                        .WithMany("Units")
                        .HasForeignKey("BatchID");

                    b.HasOne("OptraxDAL.Models.Admin.Location", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("OptraxDAL.Models.Grow.Planting", null)
                        .WithMany("ProductItems")
                        .HasForeignKey("PlantingID");

                    b.HasOne("OptraxDAL.Models.Products.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.SalesOrder", null)
                        .WithMany("Items")
                        .HasForeignKey("SalesOrderID");

                    b.Navigation("Batch");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PurchaseOrderStockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Products.PurchaseOrder", null)
                        .WithMany()
                        .HasForeignKey("PurchaseOrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Building", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Address", "Address")
                        .WithOne("Building")
                        .HasForeignKey("OptraxDAL.Models.Admin.Building", "AddressID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany("Buildings")
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.OffsiteLocation", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .HasConstraintName("FK_Locations_Address_AddressID1");

                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessID")
                        .HasConstraintName("FK_Locations_Businesses_BusinessID1");

                    b.Navigation("Address");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Site", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .HasConstraintName("FK_Locations_Address_AddressID2");

                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany("Sites")
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransferEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.InventoryTransfer", "Transfer")
                        .WithOne("PlantTransfer")
                        .HasForeignKey("OptraxDAL.Models.Grow.TransferEvent", "TransferID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransplantEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.ContainerType", "NewContainer")
                        .WithMany()
                        .HasForeignKey("NewContainerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewContainer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TreatmentEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Consumable", "Product")
                        .WithMany("PlantTreatments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Consumable", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Consumable", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.UoM", "UnitUoM")
                        .WithMany()
                        .HasForeignKey("UoMName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitUoM");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Durable", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Durable", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Light", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Light", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Plant", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropID");

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Plant", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.Plant", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.HasOne("OptraxDAL.Models.Grow.Strain", "Strain")
                        .WithMany()
                        .HasForeignKey("StrainID");

                    b.Navigation("Crop");

                    b.Navigation("Parent");

                    b.Navigation("Strain");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapCircle", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapCircle", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapLine", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapLine", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPoint", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapPoint", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.Icon", "Icon")
                        .WithMany("Points")
                        .HasForeignKey("IconID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPolygon", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapPolygon", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.Navigation("Building");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AppUser", b =>
                {
                    b.Navigation("InventoryTransfers");

                    b.Navigation("Locations");

                    b.Navigation("Maps");

                    b.Navigation("PlantEvents");

                    b.Navigation("TransferApprovals");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Buildings");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.ContainerType", b =>
                {
                    b.Navigation("Transplants");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Icon", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.IconCollection", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Location", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("TransfersIn");

                    b.Navigation("TransfersOut");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Plantings");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.CropBatch", b =>
                {
                    b.Navigation("Plantings");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Cultivar", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("ParentCultivars");

                    b.Navigation("ParentSpecies");

                    b.Navigation("ParentVarieties");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Planting", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingPattern", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingSection", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Species", b =>
                {
                    b.Navigation("Crops");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Strain", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Crops");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Variety", b =>
                {
                    b.Navigation("Crops");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.Navigation("Approval");

                    b.Navigation("PlantTransfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Resource", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.SalesOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.Map", b =>
                {
                    b.Navigation("MapObjects");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapObject", b =>
                {
                    b.Navigation("Location");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AreaLocation", b =>
                {
                    b.Navigation("Plantings");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Consumable", b =>
                {
                    b.Navigation("PlantTreatments");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Light", b =>
                {
                    b.Navigation("PlantLightEvents");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Plant", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PlantEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
