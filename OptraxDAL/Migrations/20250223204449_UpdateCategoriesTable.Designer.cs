// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OptraxDAL;

#nullable disable

namespace OptraxDAL.Migrations
{
    [DbContext(typeof(OptraxContext))]
    [Migration("20250223204449_UpdateCategoriesTable")]
    partial class UpdateCategoriesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventoryLocationStockItem", b =>
                {
                    b.Property<int>("LocationsID")
                        .HasColumnType("int");

                    b.Property<int>("StockItemsID")
                        .HasColumnType("int");

                    b.HasKey("LocationsID", "StockItemsID");

                    b.HasIndex("StockItemsID");

                    b.ToTable("InventoryLocationStockItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BuildingID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("BusinessID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<string>("CurrentPhase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExpectedFlowerDays")
                        .HasColumnType("int");

                    b.Property<int?>("ExpectedVegDays")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FlowerEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FlowerStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StrainID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("VegEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("VegStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("WasteQuantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WasteQuantityUOM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("StrainID");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventSubType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PlantID");

                    b.ToTable("PlantEvents");

                    b.HasDiscriminator<string>("EventType").HasValue("PlantEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Strain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Generation")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OriginID")
                        .HasColumnType("int");

                    b.Property<string>("OriginType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StrainType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Strains");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.StrainRelationship", b =>
                {
                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("ChildID")
                        .HasColumnType("int");

                    b.HasKey("ParentID", "ChildID");

                    b.HasIndex("ChildID");

                    b.ToTable("StrainRelationships");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.ContainerType", b =>
                {
                    b.Property<int>("ContainerTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContainerTypeID"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Capacity")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("CapacityUOM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContainerTypeID");

                    b.ToTable("ContainerTypes");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HexColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("InventoryCategories");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerTypeID")
                        .HasColumnType("int");

                    b.Property<string>("DefaultUOM")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LightTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("NeedsTransferApproval")
                        .HasColumnType("bit");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SellerID")
                        .HasColumnType("int");

                    b.Property<string>("StockType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ContainerTypeID");

                    b.HasIndex("LightTypeID");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("[SKU] IS NOT NULL");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("InventoryLocation");

                    b.HasDiscriminator<string>("LocationType").HasValue("InventoryLocation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ApprovingManagerID")
                        .HasColumnType("int");

                    b.Property<string>("AprrovingManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DestinationID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedsApproval")
                        .HasColumnType("bit");

                    b.Property<int>("OriginID")
                        .HasColumnType("int");

                    b.Property<int>("StockItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("UnitUOM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("AprrovingManagerId");

                    b.HasIndex("DestinationID");

                    b.HasIndex("OriginID");

                    b.HasIndex("StockItemID");

                    b.ToTable("InventoryTransfers");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.LightType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BulbType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorSpectrum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("CoverageAreaSF")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("LifespanHours")
                        .HasColumnType("int");

                    b.Property<decimal?>("PPF")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PPFD")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("Voltage")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("LightTypes");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InventoryItemID")
                        .HasColumnType("int");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedsTransferApproval")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("PurchaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("InventoryItemID");

                    b.ToTable("StockItems");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductUnitUOM")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("UnitQuantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductBatches");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<int?>("CropID")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryLocationID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasFilter("[Barcode] IS NOT NULL");

                    b.HasIndex("BatchID");

                    b.HasIndex("CropID");

                    b.HasIndex("InventoryLocationID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.GrowthEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<string>("NewPhase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PlantEvents");

                    b.HasDiscriminator().HasValue("Growth");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.LightEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<int>("NewLightID")
                        .HasColumnType("int");

                    b.HasIndex("NewLightID");

                    b.ToTable("PlantEvents");

                    b.HasDiscriminator().HasValue("Light");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PruneEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<string>("PruneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WasteQuantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WasteQuantityUOM")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PlantEvents");

                    b.HasDiscriminator().HasValue("Prune");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransferEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<int>("TransferID")
                        .HasColumnType("int");

                    b.HasIndex("TransferID")
                        .IsUnique()
                        .HasFilter("[TransferID] IS NOT NULL");

                    b.ToTable("PlantEvents");

                    b.HasDiscriminator().HasValue("Transfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransplantEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<int>("NewContainerID")
                        .HasColumnType("int");

                    b.HasIndex("NewContainerID");

                    b.ToTable("PlantEvents");

                    b.HasDiscriminator().HasValue("Transplant");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TreatmentEvent", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Grow.PlantEvent");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityApplied")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("QuantityUOM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasIndex("ProductID");

                    b.ToTable("PlantEvents");

                    b.HasDiscriminator().HasValue("Treatment");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.BuildingLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.InventoryLocation");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.HasIndex("AddressID")
                        .IsUnique()
                        .HasFilter("[AddressID] IS NOT NULL");

                    b.ToTable("InventoryLocation");

                    b.HasDiscriminator().HasValue("Building");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.ContainerLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.InventoryLocation");

                    b.Property<int>("ContainerTypeID")
                        .HasColumnType("int");

                    b.HasIndex("ContainerTypeID");

                    b.ToTable("InventoryLocation");

                    b.HasDiscriminator().HasValue("Container");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.OffsiteLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.InventoryLocation");

                    b.ToTable("InventoryLocation");

                    b.HasDiscriminator().HasValue("Offsite");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.RoomLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.InventoryLocation");

                    b.ToTable("InventoryLocation");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.ConsumableItem", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitCount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("UnitUOM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Consumables", (string)null);
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.DurableItem", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<DateTimeOffset?>("LastMaintenanceCheck")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaintenanceInterval")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceInvervalUOM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("DurableItems", (string)null);
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Light", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("FirstInstallDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastMaintenanceCheck")
                        .HasColumnType("datetimeoffset");

                    b.ToTable("Lights", (string)null);
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Plant", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<int?>("CropID")
                        .HasColumnType("int");

                    b.Property<bool>("IsMother")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("StartPhase")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StrainID")
                        .HasColumnType("int");

                    b.Property<string>("TrackingID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CropID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StrainID");

                    b.ToTable("Plants", (string)null);
                });

            modelBuilder.Entity("InventoryLocationStockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.InventoryLocation", null)
                        .WithMany()
                        .HasForeignKey("LocationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithMany()
                        .HasForeignKey("StockItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany("Addresses")
                        .HasForeignKey("BusinessID");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.RoomLocation", "Location")
                        .WithMany("Crops")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.Strain", "Strain")
                        .WithMany("Crops")
                        .HasForeignKey("StrainID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Strain");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "Employee")
                        .WithMany("PlantEvents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.Plant", "Plant")
                        .WithMany("PlantEvents")
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.StrainRelationship", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Strain", "ChildStrain")
                        .WithMany("Parents")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Grow.Strain", "ParentStrain")
                        .WithMany("Children")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildStrain");

                    b.Navigation("ParentStrain");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryCategory", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.InventoryCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.InventoryCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.ContainerType", "ContainerType")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ContainerTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Inventory.LightType", "LightType")
                        .WithMany("InventoryItems")
                        .HasForeignKey("LightTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("ContainerType");

                    b.Navigation("LightType");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryLocation", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.InventoryLocation", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "AprrovingManager")
                        .WithMany("InventoryTransfers")
                        .HasForeignKey("AprrovingManagerId");

                    b.HasOne("OptraxDAL.Models.Inventory.InventoryLocation", "Destination")
                        .WithMany("TransfersIn")
                        .HasForeignKey("DestinationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.InventoryLocation", "Origin")
                        .WithMany("TransfersOut")
                        .HasForeignKey("OriginID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", "StockItem")
                        .WithMany("Transfers")
                        .HasForeignKey("StockItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AprrovingManager");

                    b.Navigation("Destination");

                    b.Navigation("Origin");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.InventoryItem", "InventoryItem")
                        .WithMany("StockItems")
                        .HasForeignKey("InventoryItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.HasOne("OptraxDAL.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Products.ProductBatch", "Batch")
                        .WithMany("Units")
                        .HasForeignKey("BatchID");

                    b.HasOne("OptraxDAL.Models.Grow.Crop", null)
                        .WithMany("ProductItems")
                        .HasForeignKey("CropID");

                    b.HasOne("OptraxDAL.Models.Inventory.InventoryLocation", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("InventoryLocationID");

                    b.HasOne("OptraxDAL.Models.Products.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.LightEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Light", "NewLight")
                        .WithMany("PlantLightEvents")
                        .HasForeignKey("NewLightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewLight");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransferEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.InventoryTransfer", "Transfer")
                        .WithOne("PlantTransfer")
                        .HasForeignKey("OptraxDAL.Models.Grow.TransferEvent", "TransferID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TransplantEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.ContainerType", "NewContainer")
                        .WithMany("Transplants")
                        .HasForeignKey("NewContainerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewContainer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TreatmentEvent", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.ConsumableItem", "Product")
                        .WithMany("PlantTreatments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.BuildingLocation", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Address", "Address")
                        .WithOne("Building")
                        .HasForeignKey("OptraxDAL.Models.Inventory.BuildingLocation", "AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.ContainerLocation", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.ContainerType", "ContainerType")
                        .WithMany("ContainerLocations")
                        .HasForeignKey("ContainerTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContainerType");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.ConsumableItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.ConsumableItem", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.DurableItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.DurableItem", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Light", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Light", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Plant", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Crop", "Crop")
                        .WithMany("Plants")
                        .HasForeignKey("CropID");

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Plant", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.Plant", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.HasOne("OptraxDAL.Models.Grow.Strain", "Strain")
                        .WithMany()
                        .HasForeignKey("StrainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Parent");

                    b.Navigation("Strain");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.Navigation("Building");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AppUser", b =>
                {
                    b.Navigation("InventoryTransfers");

                    b.Navigation("PlantEvents");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.Navigation("Plants");

                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Strain", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Crops");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.ContainerType", b =>
                {
                    b.Navigation("ContainerLocations");

                    b.Navigation("InventoryItems");

                    b.Navigation("Transplants");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryItem", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryLocation", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("TransfersIn");

                    b.Navigation("TransfersOut");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.Navigation("PlantTransfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.LightType", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.RoomLocation", b =>
                {
                    b.Navigation("Crops");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.ConsumableItem", b =>
                {
                    b.Navigation("PlantTreatments");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Light", b =>
                {
                    b.Navigation("PlantLightEvents");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Plant", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PlantEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
