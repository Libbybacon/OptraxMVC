// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using OptraxDAL;

#nullable disable

namespace OptraxDAL.Migrations
{
    [DbContext(typeof(OptraxContext))]
    [Migration("20250407225111_TraitDefHasUom")]
    partial class TraitDefHasUom
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IconIconCollection", b =>
                {
                    b.Property<int>("CollectionsId")
                        .HasColumnType("int");

                    b.Property<int>("IconsId")
                        .HasColumnType("int");

                    b.HasKey("CollectionsId", "IconsId");

                    b.HasIndex("IconsId");

                    b.ToTable("IconIconCollection", "Admin");
                });

            modelBuilder.Entity("LocationStockItem", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<int>("StockItemsId")
                        .HasColumnType("int");

                    b.HasKey("LocationsId", "StockItemsId");

                    b.HasIndex("StockItemsId");

                    b.ToTable("LocationStockItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("Address", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Businesses", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.ContainerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Capacity")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UoMName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UoMName");

                    b.ToTable("ContainerTypes", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Icons", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.IconCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("IconCollections", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Input", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("InputName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputName")
                        .IsUnique();

                    b.ToTable("Inputs", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("IconId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("MapObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.HasIndex("MapObjectId")
                        .IsUnique()
                        .HasFilter("[MapObjectId] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator<string>("LocationType").HasValue("Location");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.UoM", b =>
                {
                    b.Property<string>("UnitName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("PerQuantity")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("UnitAbbr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UnitName");

                    b.ToTable("UoMs", "Admin");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("Crops", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.CropBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CropId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OriginType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PropagationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Batches", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CommonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CultivarName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHybrid")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Parent2Id")
                        .HasColumnType("int");

                    b.Property<string>("PlantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Parent1Id");

                    b.HasIndex("Parent2Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("Plants", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlantProfiles", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantTraits", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Planting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("BatchId")
                        .HasColumnType("int");

                    b.Property<int>("CropId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentStage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DatePlanted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlantingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("WasteQuantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WasteQuantityUoM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("CropId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Plantings", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Direction")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Length")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PlantSpacing")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Radius")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("SpaceLeft")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("SpaceRight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlantingPatterns", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MapObjectId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PatternId")
                        .HasColumnType("int");

                    b.Property<int>("PlantingId")
                        .HasColumnType("int");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MapObjectId")
                        .IsUnique()
                        .HasFilter("[MapObjectId] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.HasIndex("PatternId");

                    b.HasIndex("PlantingId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantingSections", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TraitDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysShow")
                        .HasColumnType("bit");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasUOM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDropdown")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRange")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TraitDefinitions", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TraitOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("TraitOptions", "Grow");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HexColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("TextColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Categories", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ApprovalId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedsApproval")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("UnitUoM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OriginId");

                    b.HasIndex("StockItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Transfers", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DefaultUoM")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedsTransferApproval")
                        .HasColumnType("bit");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("StockType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StockUoM")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("[SKU] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Resources", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalesOrders", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedsTransferApproval")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("PurchaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("StockItems", "Inventory");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.TransferApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ApprovalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TransferId")
                        .IsUnique();

                    b.ToTable("TransferApprovals", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Maps", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId");

                    b.ToTable("MapObjects", "Map");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitUoMName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UnitUoMName");

                    b.HasIndex("UserId");

                    b.ToTable("Products", "Products");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UnitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductBatches", "Products");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BatchId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantingId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasFilter("[Barcode] IS NOT NULL");

                    b.HasIndex("BatchId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlantingId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("ProductItems", "Products");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FulfillmentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ShipDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("VerifiedReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrder", "Products");
                });

            modelBuilder.Entity("PlantProfilePlantTrait", b =>
                {
                    b.Property<int>("ProfilesId")
                        .HasColumnType("int");

                    b.Property<int>("TraitsId")
                        .HasColumnType("int");

                    b.HasKey("ProfilesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PlantProfilePlantTrait", "Grow");
                });

            modelBuilder.Entity("PlantTraitTraitOption", b =>
                {
                    b.Property<int>("SelectedOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("TraitsId")
                        .HasColumnType("int");

                    b.HasKey("SelectedOptionsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PlantTraitTraitOption", "Grow");
                });

            modelBuilder.Entity("PurchaseOrderStockItem", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrdersId")
                        .HasColumnType("int");

                    b.HasKey("ItemsId", "PurchaseOrdersId");

                    b.HasIndex("PurchaseOrdersId");

                    b.ToTable("PurchaseOrderStockItem");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AreaLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<decimal?>("Length")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Radius")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("AreaLocation");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Building", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<int?>("AddressId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("BusinessId");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Building");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.OffsiteLocation", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<int?>("AddressId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("IX_Locations_AddressId1");

                    b.HasIndex("BusinessId");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Offsite");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Room", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Site", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.Property<int?>("AddressId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("IX_Locations_AddressId2");

                    b.HasIndex("BusinessId");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Site");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Vehicle", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.Location");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Vehicle");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Consumable", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitCount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("UoMName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("UoMName");

                    b.ToTable("Consumables", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Durable", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Inventory.StockItem");

                    b.Property<DateTimeOffset?>("LastMaintenanceCheck")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaintenanceInterval")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceInvervalUoM")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Durables", "Inventory");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapCircle", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<Polygon>("Area")
                        .HasColumnType("geometry");

                    b.Property<byte[]>("ColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<string>("DashArray")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("FillColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Radius")
                        .HasPrecision(12, 8)
                        .HasColumnType("float(12)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Circles", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapLine", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<byte[]>("ColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<string>("DashArray")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("FillColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<LineString>("LineGeometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Lines", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPoint", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<decimal>("Elevation")
                        .HasPrecision(12, 8)
                        .HasColumnType("decimal(12,8)");

                    b.Property<int>("IconCollectionId")
                        .HasColumnType("int");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(12, 8)
                        .HasColumnType("decimal(12,8)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(12, 8)
                        .HasColumnType("decimal(12,8)");

                    b.HasIndex("IconId");

                    b.ToTable("Points", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPolygon", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Maps.MapObject");

                    b.Property<byte[]>("ColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<string>("DashArray")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("FillColorBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(4)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Polygon>("PolyGeometry")
                        .HasColumnType("geometry");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Polygons", "Map");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Field", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.AreaLocation");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Field");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Greenhouse", b =>
                {
                    b.HasBaseType("OptraxDAL.Models.Admin.AreaLocation");

                    b.ToTable("Locations", "Admin");

                    b.HasDiscriminator().HasValue("Greenhouse");
                });

            modelBuilder.Entity("IconIconCollection", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.IconCollection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.Icon", null)
                        .WithMany()
                        .HasForeignKey("IconsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationStockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithMany()
                        .HasForeignKey("StockItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany("Addresses")
                        .HasForeignKey("BusinessId");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.ContainerType", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.UoM", "CapacityUoM")
                        .WithMany()
                        .HasForeignKey("UoMName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapacityUoM");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.IconCollection", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.IconCollection", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Location", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("OptraxDAL.Models.Maps.MapObject", "MapObject")
                        .WithOne("Location")
                        .HasForeignKey("OptraxDAL.Models.Admin.Location", "MapObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OptraxDAL.Models.Admin.Location", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId");

                    b.Navigation("Icon");

                    b.Navigation("MapObject");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Plant", "Plant")
                        .WithMany("Crops")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.CropBatch", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Crop", "Crop")
                        .WithMany("Batches")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Crop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Plant", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.Plant", "Parent1")
                        .WithMany("ChildrenP1")
                        .HasForeignKey("Parent1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.Plant", "Parent2")
                        .WithMany("ChildrenP2")
                        .HasForeignKey("Parent2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.PlantProfile", "Profile")
                        .WithMany("Plants")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Parent1");

                    b.Navigation("Parent2");

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantProfile", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantTrait", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.TraitDefinition", "Definition")
                        .WithMany("Traits")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Definition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Planting", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.CropBatch", "Batch")
                        .WithMany("Plantings")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.Crop", "Crop")
                        .WithMany("Plantings")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AreaLocation", "Location")
                        .WithMany("Plantings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Batch");

                    b.Navigation("Crop");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingPattern", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingSection", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", "MapObject")
                        .WithOne("Section")
                        .HasForeignKey("OptraxDAL.Models.Grow.PlantingSection", "MapObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OptraxDAL.Models.Grow.PlantingSection", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Grow.PlantingPattern", "Pattern")
                        .WithMany("Sections")
                        .HasForeignKey("PatternId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Grow.Planting", "Planting")
                        .WithMany("Sections")
                        .HasForeignKey("PlantingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("MapObject");

                    b.Navigation("Parent");

                    b.Navigation("Pattern");

                    b.Navigation("Planting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TraitDefinition", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TraitOption", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.TraitDefinition", "Definition")
                        .WithMany("Options")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Definition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Category", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Location", "Destination")
                        .WithMany("TransfersIn")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.Location", "Origin")
                        .WithMany("TransfersOut")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", "StockItem")
                        .WithMany("Transfers")
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany("InventoryTransfers")
                        .HasForeignKey("UserId");

                    b.Navigation("Destination");

                    b.Navigation("Origin");

                    b.Navigation("StockItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Resource", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Category", "Category")
                        .WithMany("Resources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.SalesOrder", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.Resource", "Resource")
                        .WithMany("StockItems")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.TransferApproval", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "Manager")
                        .WithMany("TransferApprovals")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.InventoryTransfer", "Transfer")
                        .WithOne("Approval")
                        .HasForeignKey("OptraxDAL.Models.Inventory.TransferApproval", "TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.Map", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany("Maps")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapObject", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.Map", "Map")
                        .WithMany("MapObjects")
                        .HasForeignKey("MapId");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.UoM", "UnitUoM")
                        .WithMany()
                        .HasForeignKey("UnitUoMName");

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("UnitUoM");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.HasOne("OptraxDAL.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Products.ProductBatch", "Batch")
                        .WithMany("Units")
                        .HasForeignKey("BatchId");

                    b.HasOne("OptraxDAL.Models.Admin.Location", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("OptraxDAL.Models.Grow.Planting", null)
                        .WithMany("ProductItems")
                        .HasForeignKey("PlantingId");

                    b.HasOne("OptraxDAL.Models.Products.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Inventory.SalesOrder", null)
                        .WithMany("Items")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("Batch");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PlantProfilePlantTrait", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.PlantProfile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Grow.PlantTrait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantTraitTraitOption", b =>
                {
                    b.HasOne("OptraxDAL.Models.Grow.TraitOption", null)
                        .WithMany()
                        .HasForeignKey("SelectedOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Grow.PlantTrait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PurchaseOrderStockItem", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Products.PurchaseOrder", null)
                        .WithMany()
                        .HasForeignKey("PurchaseOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Building", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Address", "Address")
                        .WithOne("Building")
                        .HasForeignKey("OptraxDAL.Models.Admin.Building", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany("Buildings")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.OffsiteLocation", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Locations_Address_AddressId1");

                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_Locations_Businesses_BusinessId1");

                    b.Navigation("Address");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Site", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Locations_Address_AddressId2");

                    b.HasOne("OptraxDAL.Models.Admin.Business", "Business")
                        .WithMany("Sites")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Consumable", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Consumable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Admin.UoM", "UnitUoM")
                        .WithMany()
                        .HasForeignKey("UoMName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitUoM");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Durable", b =>
                {
                    b.HasOne("OptraxDAL.Models.Inventory.StockItem", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Inventory.Durable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapCircle", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapCircle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapLine", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapLine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPoint", b =>
                {
                    b.HasOne("OptraxDAL.Models.Admin.Icon", "Icon")
                        .WithMany("Points")
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapPoint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapPolygon", b =>
                {
                    b.HasOne("OptraxDAL.Models.Maps.MapObject", null)
                        .WithOne()
                        .HasForeignKey("OptraxDAL.Models.Maps.MapPolygon", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Address", b =>
                {
                    b.Navigation("Building");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AppUser", b =>
                {
                    b.Navigation("InventoryTransfers");

                    b.Navigation("Locations");

                    b.Navigation("Maps");

                    b.Navigation("TransferApprovals");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Business", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Buildings");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Icon", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.IconCollection", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.Location", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("TransfersIn");

                    b.Navigation("TransfersOut");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Crop", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Plantings");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.CropBatch", b =>
                {
                    b.Navigation("Plantings");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Plant", b =>
                {
                    b.Navigation("ChildrenP1");

                    b.Navigation("ChildrenP2");

                    b.Navigation("Crops");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantProfile", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.Planting", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingPattern", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.PlantingSection", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("OptraxDAL.Models.Grow.TraitDefinition", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.InventoryTransfer", b =>
                {
                    b.Navigation("Approval");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.Resource", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.SalesOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OptraxDAL.Models.Inventory.StockItem", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.Map", b =>
                {
                    b.Navigation("MapObjects");
                });

            modelBuilder.Entity("OptraxDAL.Models.Maps.MapObject", b =>
                {
                    b.Navigation("Location");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.Product", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("OptraxDAL.Models.Products.ProductBatch", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("OptraxDAL.Models.Admin.AreaLocation", b =>
                {
                    b.Navigation("Plantings");
                });
#pragma warning restore 612, 618
        }
    }
}
